name: Tests

on: [push, pull_request]

jobs:
  phpstan:
    runs-on: 'ubuntu-latest'

    name: Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          coverage: none
          extensions: pdo, mysql, pdo_mysql

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --strict"

      - name: "Determine composer cache directory"
        id: "determine-composer-cache-directory"
        run: "echo \"::set-output name=directory::$(composer config cache-dir)\""

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.6"
        with:
          path: "${{ steps.determine-composer-cache-directory.outputs.directory }}"
          key: "${{ hashFiles('composer.lock') }}"

      - name: Install dependencies
        run: composer install --no-interaction --prefer-source

      - name: Run phpstan
        run: composer analyze

  test:
    runs-on: 'ubuntu-latest'
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: utgars_chronicles_test
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    name: Test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          coverage: none
          extensions: pdo, mysql, pdo_mysql

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --strict"

      - name: "Determine composer cache directory"
        id: "determine-composer-cache-directory"
        run: "echo \"::set-output name=directory::$(composer config cache-dir)\""

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.6"
        with:
          path: "${{ steps.determine-composer-cache-directory.outputs.directory }}"
          key: "${{ hashFiles('composer.lock') }}"

      - name: Install composer dependencies
        run: composer install --no-interaction --prefer-source

      - name: Install Javascript Dependencies
        run: yarn install --non-interactive

      - name: Compile Javascript
        run: yarn production

      - name: Setup Application
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Run Tests
        run: vendor/bin/phpunit
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}

  deploy:
    if: contains(github.ref, 'master')
    needs: test
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Trigger Envoyer Deploy
        uses: wei/curl@v1
        with:
          args: ${{secrets.ENVOYER_DEPLOY_URL}}
